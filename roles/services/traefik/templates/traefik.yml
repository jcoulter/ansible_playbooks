---
global:
  sendAnonymousUsage: true
api:
  dashboard: true
  # insecure: true
  debug: true
entryPoints:
  http:
    address: ":80"
    http:
      # middlewares:
      #   - crowdsec-bouncer@file
      redirections:
        entryPoint:
          to: https
          scheme: https
  https:
    address: ":443"
    # http:
      # middlewares:
      #   - crowdsec-bouncer@file
  # http-external:
  #   address: ":82"
  #   http:
  #     # middlewares:
  #     #   - crowdsec-bouncer@file
  #     redirections:
  #       entryPoint:
  #         to: https-external
  #         scheme: https
  # https-external:
  #   address: ":444"
  #   # http:
  #     # middlewares:
  #     #   - crowdsec-bouncer@file
serversTransport:
  insecureSkipVerify: true
providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    watch: true
    exposedByDefault: false
  file:
    filename: /config.yml
    watch: true
log:
  level: DEBUG
  format: common
  filePath: '/var/log/traefik/traefik.log'
accessLog:
  filePath: '/var/log/traefik/access.log'


certificatesResolvers:
  cloudflare:
    acme:
    # TODO: substitutions from ansible_vault
      email: "{{ primary_email }}"
      storage: acme.json
      dnsChallenge:
        provider: cloudflare
        # disablePropagationCheck: true # uncomment this if you have issues pulling certificates through cloudflare, By setting this flag to true disables the need to wait for the propagation of the TXT record to all authoritative name servers.
        resolvers:
          - "1.1.1.1:53"
          - "1.0.0.1:53"

# certificatesResolvers:
#   letsEncrypt:
#     acme:
#       #caServer: "https://acme-v02.api.letsencrypt.org/directory"
#       #caServer: "https://acme-staging-v02.api.letsencrypt.org/directory"
#       email: myemail@mayemail.com
#       storage: /acme.json
#       #keyType: EC384   
#       dnsChallenge:
#         provider: mydnsprovider