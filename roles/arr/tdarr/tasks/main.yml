---
- name: Make sure the tdarr container is created and running
  docker_container:
    image: ghcr.io/haveagitgat/tdarr:latest
    name: tdarr
    networks:
      - name: media_network
    labels:
      traefik.enable: "true"
      traefik.http.routers.tdarr.tls: "true"
      traefik.http.routers.tdarr.rule: Host("tdarr.docker.localhost")
    ports:
      - 8265:8265 # webUI port
      - 8266:8266 # server port
      - 8267:8267 # Internal node port
      - 8268:8268 # Example extra node port
    pull: yes
    state: 'started'
    recreate: yes
    env:
      PUID: "{{ puid }}"
      PGID: "{{ pgid }}"
      TZ: "{{ timezone }}"
      UMASK_SET: "002"
      serverIP: "0.0.0.0"
      serverPort: "8266"
      webUIPort: "8265"
      internalNode: "true"
      nodeID: MyInternalNode
    volumes:
      - "{{ config_root }}/tdarr_config/configs:/app/configs"
      - "{{ config_root }}/tdarr_config/logs:/app/logs"
      - "{{ config_root }}/tdarr_config/server:/app/server"
      - "{{ data_root }}/media:/media"
      # - "{{ data_root }}/transcode_cache:/temp"
    restart_policy: unless-stopped


# # node example
#   tdarr-node:
#     container_name: tdarr-node
#     image: ghcr.io/haveagitgat/tdarr_node:latest
#     restart: unless-stopped
#     network_mode: service:tdarr
#     environment:
#       - TZ=Europe/London
#       - PUID=${PUID}
#       - PGID=${PGID}
#       - UMASK_SET=002
#       - nodeID=MainNode
#       - serverIP=0.0.0.0
#       - serverPort=8266
#     volumes:
#       - /docker/tdarr/configs:/app/configs
#       - /docker/tdarr/logs:/app/logs
#       - /media:/media
#       - /transcode_cache:/temp